{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Paisley",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#commands"
		},
		{
			"include": "#labels"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#strings2"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#inline_commands"
		},
		{
			"name": "comment.line.semicolon.paisley",
			"match": "[;\\|<>]"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.paisley",
					"begin": "#\\[\\[",
					"end": "\\]\\]",
					"patterns": [
						{
							"include": "#annotations"
						}
					]
				},
				{
					"name": "comment.line.number-sign.paisley",
					"begin": "#",
					"end": "$",
					"patterns": [
						{
							"include": "#annotations"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.paisley",
					"match": "\\b(for|while|in|do|if|then|elif|else|end|continue|break|cache|defer|subroutine|gosub|return|stop|define|require|match|using|as|try|catch)\\b"
				},
				{
					"name": "meta.var_delete.paisley",
					"match": "\\b(delete)(([ \\t]+[a-zA-Z_]\\w*)+)",
					"captures": {
						"1": {
							"name": "keyword.control.paisley"
						},
						"2": {
							"name": "entity.name.variable.paisley"
						}
					}
				},
				{
					"name": "keyword.control.paisley",
					"match": "\\b(delete)\\b[ \\t]*(?![a-zA-Z_])"
				},
				{
					"name": "keyword.control.paisley",
					"begin": "\\b(let|initial)\\b",
					"end": "=|$|(?=[;#])",
					"patterns": [
						{
							"include": "#expressions"
						},
						{
							"name": "entity.name.variable.paisley",
							"match": "\\b[a-zA-Z_]\\w*\\b(?![ \\t]*\\()"
						}
					]
				}
			]
		},
		"commands": {
			"patterns": [
				{
					"name": "variable.language.command.paisley",
					"match": "(^|(?<=\\bdo\\b|\\bthen\\b|[;\\|]|\\bend\\b|\\belse\\b|\\bsubroutine[ \\t]+[^'\"\\$\\{\\} \\t#;]+))[ \\t]*(?!(for|while|in|do|if|then|elif|else|end|continue|break|subroutine|gosub|return|stop|delete|let|initial|define|require|match|using|as|catch)\\b)[^'\"\\$\\{\\} \\t#;]+"
				},
				{
					"name": "entity.name.variable.paisley",
					"match": "(?<=\\bfor)([ \\t]+[a-zA-Z_]\\w*)+[ \\t]+\\b"
				},
				{
					"name": "constant.numeric.paisley",
					"match": "(?<=[ \\t])-?[0-9\\.]+\\b"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"name": "support.class.paisley",
					"match": "(?<=\\bsubroutine)[ \\t]+[^'\"\\$\\{\\} \\t#;]+"
				},
				{
					"name": "support.class.paisley",
					"match": "(?<=\\bgosub)[ \\t]+[^'\"\\$\\{\\} \\t#;]+"
				},
				{
					"name": "support.class.paisley",
					"match": "(?<=\\bbreak[ \\t]+cache)[ \\t]+[^'\"\\$\\{\\} \\t#;]+"
				}
			]
		},
		"strings": {
			"name": "string.interpolated.paisley",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escape_sequences"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#inline_commands"
				}
			]
		},
		"strings2": {
			"name": "string.quoted.single.paisley",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"include": "#escape_sequences"
				}
			]
		},
		"escape_sequences": {
			"patterns": [
				{
					"name": "constant.character.escape.paisley",
					"match": "\\\\(n|t|\"|'|\\\\|r| |\\{|\\}|\\^\\-\\^|:relaxed:|:P|:yum:|<3|:heart_eyes:|B\\)|:sunglasses:|:D|:grinning:|\\^o\\^|:smile:|XD|:laughing:|:lol:|=D|:smiley:|:sweat_smile:|DX|:tired_face:|;P|:stuck_out_tongue_winking_eye:|:-\\*|;-\\*|:kissing_heart:|:kissing:|:rofl:|:\\)|:slight_smile:|:\\(|:frown:|:frowning:)"
				}
			]
		},
		"expressions": {
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "keyword.paisley",
					"match": "\\b(in|exists|like|and|or|not|xor)\\b|\\*|\\+|=|/|%|!=|~=|<|>|&|:|\\-"
				},
				{
					"name": "support.class.paisley",
					"match": "!+\\w*"
				},
				{
					"name": "keyword.control.paisley",
					"match": "\\b(in|exists|like|and|or|not|xor|if|else)\\b"
				},
				{
					"name": "meta.list_comp.paisley",
					"match": "\\b(for)([ \\t]+[a-zA-Z_]\\w*[ \\t]+)(in)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.paisley"
						},
						"2": {
							"name": "entity.name.variable.paisley"
						},
						"3": {
							"name": "keyword.control.paisley"
						}
					}
				},
				{
					"name": "keyword.control.paisley",
					"match": "\\bfor\\b(?![ \\t]+[a-zA-Z_]\\w*[ \\t]+in\\b)"
				},
				{
					"name": "constant.language.paisley",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "entity.name.variable.paisley",
					"match": "\\b[a-zA-Z_]\\w*\\b(?![ \\t]*\\()"
				},
				{
					"include": "#inline_commands"
				},
				{
					"name": "variable.language.paisley",
					"match": "\\$|@[0-9]*"
				},
				{
					"name": "constant.numeric.paisley",
					"match": "\\b(0x[0-9a-fA-F_]*|0b[01_]*|[0-9][0-9_]*(\\.[0-9_]+)?|\\.[0-9][0-9_]*)\\b"
				},
				{
					"name": "invalid.illegal.bad_number.paisley",
					"match": "\\b([0-9][0-9a-zA-Z_]*)\\b"
				},
				{
					"name": "entity.name.function.paisley",
					"match": "(\\.[ \\t]*)?\\b[a-zA-Z_]\\w*(?=[ \\t]*\\()\\b"
				},
				{
					"name": "entity.name.function.paisley",
					"match": "\\\\[^'\"\\$\\{\\} \\t#]+(?=[ \\t]*\\()"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#strings2"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"inline_commands": {
			"begin": "\\${",
			"end": "}",
			"patterns": [
				{
					"name": "keyword.control.paisley",
					"match": "(?<=\\{)[ \\t]*gosub\\b"
				},
				{
					"name": "support.class.paisley",
					"match": "(?<=\\{[ \\t]*gosub)[ \\t]+[^'\"\\$\\{\\} \\t#]+"
				},
				{
					"name": "variable.language.paisley",
					"match": "(?<=\\{)[ \\t]*[^'\"\\$\\{\\} \\t#]+"
				},
				{
					"name": "constant.numeric.paisley",
					"match": "(?<=[ \\t])-?[0-9\\.]+\\b"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#strings2"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#inline_commands"
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"name": "keyword.paisley",
					"match": "(?i)@(export|brief|shell|plasma|error|private|sandbox)\\b"
				},
				{
					"match": "(?i)(@param)\\b[ \t]*([^ \t]+)[ \t]*([^ \t]+)",
					"captures": {
						"1": {
							"name": "keyword.paisley"
						},
						"2": {
							"name": "entity.name.variable.paisley"
						},
						"3": {
							"name": "support.class.paisley"
						}
					}
				},
				{
					"match": "(?i)(@return)\\b[ \t]*([^ \t]+)",
					"captures": {
						"1": {
							"name": "keyword.paisley"
						},
						"2": {
							"name": "support.class.paisley"
						}
					}
				},
				{
					"match": "(?i)(@mutate)\\b[ \t]*([^ \t]+)",
					"captures": {
						"1": {
							"name": "keyword.paisley"
						},
						"2": {
							"name": "entity.name.variable.paisley"
						}
					}
				},
				{
					"name": "comment.line.debug.paisley",
					"begin": "(?i)(@DEBUG)[ \\t]+(\\w+)",
					"end": "(?i)(@END)\\b",
					"captures": {
						"1": {
							"name": "keyword.paisley"
						},
						"2": {
							"name": "keyword.paisley"
						},
						"3": {
							"name": "keyword.paisley"
						}
					},
					"patterns": [
						{
							"include": "source.lua"
						}
					]
				},
				{
					"name": "comment.line.debug.paisley",
					"begin": "(?i)(?=@COMMANDS\\b)",
					"end": "$",
					"patterns": [
						{
							"name": "keyword.paisley",
							"begin": "(?i)@COMMANDS\\b",
							"end": "$",
							"patterns": [
								{
									"name": "comment.line.semicolon.paisley",
									"begin": "[;#]",
									"end": "$"
								},
								{
									"name": "keyword.paisley",
									"match": "(?<!:)[ \\t]*[^:, \\t'\";#]+"
								},
								{
									"name": "support.class.paisley",
									"match": "(?<=:)[ \\t]*(null|boolean|number|string|array(\\[(string|number)\\])?|any)\\b"
								},
								{
									"name": "invalid.illegal.bad_return_value.paisley",
									"match": "(?<=:)[ \\t]*[^:, \\t'\";]+"
								},
								{
									"name": "comment.line.ignore.paisley",
									"match": "."
								}
							]
						}
					]
				}
			]
		}
	},
	"scopeName": "source.paisley"
}